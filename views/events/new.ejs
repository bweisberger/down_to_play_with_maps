<!DOCTYPE html>
<html>
  <%-include ../../partials/_head.ejs%>
  <body>
    <style>
      /* Always set the map height explicitly to define the size of the div
                 * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
      }

      #infowindow-content .title {
        font-weight: bold;
      }

      #infowindow-content {
        display: none;
      }

      #map #infowindow-content {
        display: inline;
      }

      .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
      }

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
      }
      #target {
        width: 345px;
      }
    </style>
    <h1>Create an Event</h1>
    <%-include ../../partials/_navbar.ejs%>
    <main>
      <%-include ../../partials/_alert.ejs%>
      <form action="/events/" method="post">
        Enter Event Name:
        <input type="text" name="name" placeholder="Name of your event" /><br />
        Enter Date:
        <input type="date" name="date" placeholder="MM/DD/YYYY" /><br />
        Enter Time:
        <input
          type="text"
          name="time"
          placeholder="Time players should arrive"
        /><br />
        Enter Game:
        <input
          type="text"
          name="gameToBePlayed"
          placeholder="Name of game/sport/activity being played at event"
        /><br />
        <input
          type="number"
          name="maxNumberOfPlayers"
          placeholder="Maximum # of players required"
        /><br />
        <input
          type="number"
          name="minNumberOfPlayers"
          placeholder="Minimum # of players required"
        /><br />
        <input
          type="number"
          name="availableSpots"
          placeholder="# of players spots available"
        /><br />
        <input
          id="pac-input"
          class="controls"
          type="text"
          name="location"
          placeholder="Event location"
        /><br />
        <textarea name="description" placeholder="Event description"></textarea
        ><br />
        <input
          type="text"
          name="type"
          placeholder="Event type (e.g. cards, boardgame, indoor sport...)"
        /><br />
        <input type="text" placeholder="Image URL" name="image" /><br />
        <input type="submit" value="Create Event" />
      </form>

      <div id="map"></div>
      <script>
        // This example adds a search box to a map, using the Google Place Autocomplete
        // feature. People can enter geographical searches. The search box will return a
        // pick list containing a mix of places and predicted search terms.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        function initAutocomplete() {
          const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -33.8688, lng: 151.2195 },
            zoom: 13,
            mapTypeId: "roadmap"
          });

          // Create the search box and link it to the UI element.
          const input = document.getElementById("pac-input");
          const searchBox = new google.maps.places.SearchBox(input);
          //   map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

          // Bias the SearchBox results towards current map's viewport.
          map.addListener("bounds_changed", function() {
            searchBox.setBounds(map.getBounds());
          });

          let markers = [];
          // Listen for the event fired when the user selects a prediction and retrieve
          // more details for that place.
          searchBox.addListener("places_changed", function() {
            const places = searchBox.getPlaces();
            console.log(places[0].geometry.location, "<--places");
            // console.log(req.body, "<--req.body in new.ejs");
            // console.log(res.locals, "<--res.locals in new.ejs");

            if (places.length == 0) {
              return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
              marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
              if (!place.geometry) {
                console.log("Returned place contains no geometry");
                return;
              }
              const icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
              };

              // Create a marker for each place.
              markers.push(
                new google.maps.Marker({
                  map: map,
                  icon: icon,
                  title: place.name,
                  position: place.geometry.location
                })
              );

              if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
              } else {
                bounds.extend(place.geometry.location);
              }
            });
            map.fitBounds(bounds);
          });
        }
      </script>
    </main>
    <%-include ../../partials/_footer.ejs%>
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBHLett8djBo62dDXj0EjCimF8Rd6E8cxg&libraries=places&callback=initAutocomplete"
      async
      defer
    ></script>
  </body>
</html>
